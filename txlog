#!/bin/sh
####################
# txlog - Attempt to figure out who is currently Transmitting across the given Allstar node list
#
# HISTORICAL INFORMATION -
#
#  2018-12-11  msipin  Created
#  2018-12-12  msipin  Added display of "raw" data when changes are detected (requires code
#                      change to "SHOW_RAW" variable, below). Moved temporary files to /dev/shm
#                      and ensured they're deleted when this command terminates. Added default
#                      timeout to "wget" requests. Added ability to detect changes to list of
#                      connected nodes. Added process-id to tmp_file(x) filenames so we can run
#                      multiple copies of this tool at the same time without conflict.
#  2018-12-13  msipin  Displayed data from Allstar-node db (if available) for each node.
#                      Dynamically draw/redraw "bubbles" diagram in the background when needed.
#                      Dynamically adjust colors of nodes in "bubbles" diagram (once drawn).
#  2018-12-14  msipin  Changed "yellow" to "lightyellow" as stop-color for "questionable" status
#                      updates.
####################

# Local copy of Allstar node database (CAUTION: might not exist! Don't assume it does!)
# NOTE: THIS MUST MATCH WHAT IS SPECIFIED IN "getdb"!!
ALLSTAR_NODE_DB=/var/tmp/nodes.db

# This is the URL to the output (SVG) diagram (CAUTION: might not exist! Don't assume it does!)
# NOTE: THIS MUST MATCH WHAT IS SPECIFIED IN "bubbles"!!
outsvg="/srv/http/supermon/bubbles.svg"
outsvg2="/srv/http/supermon/bubbles2.svg"


SHOW_RAW=0	# Set to "1" if you want to see the "raw" data for all nodes upon delta detection

# Max timeout for any one wget command (in seconds)
WGET_TIMEOUT=15

# How often (after how many loops) to check the node list for connects/disconnects
### TEST VALUE - 5		averages 13-14 seconds for a 6-node network
### PRODUCTION VALUE - 20	averages about 60 - 80 seconds for a 6-node network
GENERATE_NODE_LIST_MODULO=30



# Starting NODE number (usually is *YOUR* node number!) - unless you
# override it on the command line!
SEED_NODE_NUMBER=`echo $NODE1`

NODE_LIST=""

if [ $# -ge 1 ]
then
    SEED_NODE_NUMBER=$1
fi


tmp_file1="/dev/shm/txlog.$$.1"
tmp_file2="/dev/shm/txlog.$$.2"
tmp_file3="/dev/shm/txlog.$$.3"
tmp_file4="/dev/shm/txlog.$$.4"
tmp_file5="/dev/shm/txlog.$$.5"

tmp_db_file=/dev/shm/astar.$$.db


trap "rm -f $tmp_file1 $tmp_file2 $tmp_file3 $tmp_file4 $tmp_file5 $tmp_db_file; exit 0" 0 1 2 3 6 12 15


rm -f $tmp_file1 $tmp_file2 $tmp_file3 $tmp_file4 $tmp_file5 $tmp_db_file



bubble_diagram_nominal() {
  # If Allstar node database exists, and non-zero-length...
  if [ -s ""$outsvg"" ]
  then
	# Make all nodes in the "bubble diagram" "nominal" coloring
	#echo "DEBUG: Making all bubbles nominal..."

	# Annotations for each state -
	#
	# use "white:lightblue" for "nominal"
	#    <stop offset="1" style="stop-color:lightblue;stop-opacity:1.;"/>
	# use "white:lightyellow" for "short transmit"
	#    <stop offset="1" style="stop-color:lightyellow;stop-opacity:1.;"/>
	# use "white:green" for "transmit"
	#    <stop offset="1" style="stop-color:green;stop-opacity:1.;"/>

	rm -f $outsvg2
	cat $outsvg | sed "s/stop-color:lightyellow;stop-opacity/stop-color:lightblue;stop-opacity/" | sed "s/stop-color:green;stop-opacity/stop-color:lightblue;stop-opacity/" >> $outsvg2
	mv $outsvg2 $outsvg
  fi
}

bubble_diagram_active() {
  active_node=$1;
  stop_color=$2;

  # If Allstar node database exists, and non-zero-length...
  if [ -s ""$outsvg"" ]
  then
	# Mark the given node as "active"
	#echo "DEBUG: Marking node ${active_node} active..."

	# Annotations for each state -
	#
	# use "white:lightblue" for "nominal"
	#    <stop offset="1" style="stop-color:lightblue;stop-opacity:1.;"/>
	# use "white:lightyellow" for "short transmit"
	#    <stop offset="1" style="stop-color:lightyellow;stop-opacity:1.;"/>
	# use "white:green" for "transmit"
	#    <stop offset="1" style="stop-color:green;stop-opacity:1.;"/>

	rm -f $outsvg2
	cat $outsvg | awk '{

if ((NF == 3) && ($2 == TGT)) {
#print "<!-- DEBUG: FOUND TGT -->"
#           <!-- 49125 -->
	while ((NF >= 1) && ($1 != "<stop") && ($2 != "offset=\"1\"")) {
#           <g id="node1" class="node"><title>49125</title>
#           <defs>
#           <linearGradient id="l_0" gradientUnits="userSpaceOnUse" x1="-245.738" y1="124.104" x2="-9.39005" y2="124.104" >
#           <stop offset="0" style="stop-color:white;stop-opacity:1.;"/>
		print $0;
		getline;
	}
#           <stop offset="1" style="stop-color:lightblue;stop-opacity:1.;"/>
	print $0;
	printf "<stop offset=\"1\" style=\"stop-color:%s;stop-opacity:1.;\"/>\n", STOP_COLOR;
	getline
#print "<!-- DEBUG: DONE PARSING TGT -->"
}
else {
    print $0;
}

	}' TGT=$active_node STOP_COLOR=$stop_color >> $outsvg2
	mv $outsvg2 $outsvg
  fi
}

get_node_list() {
	#echo `date`"  -  DEBUG: Checking for connects/disconnects..."
	rm -f $tmp_db_file
	# Develop "local database" of currently-connected nodes
	astar $SEED_NODE_NUMBER >> $tmp_db_file
	# Develop list of nodes to check
	NODE_LIST=`cat $tmp_db_file | awk '{ print $1; }'`
	#echo "DEBUG: NODE_LIST: [${NODE_LIST}]"
}


# Generate initial NODE_LIST
get_node_list


count=0
while [ 1 ]
do
    rm -f $tmp_file2 $tmp_file3
    for NODE in $NODE_LIST
    do
	##echo "DEBUG: Checking ${NODE}..."
	data=`wget --timeout=${WGET_TIMEOUT} -q -O- http://stats.allstarlink.org/maps/nodeList.php?node=${NODE} | awk -F"<tr><td>" '{ for (i=1;i<=NF;i++) { print $i; }; }' | grep time | sed "s/</ /g" | sed "s/>/ /g" | sed "s/\// /g" | sed "s/ td / /g" | sed "s/ tr//g"`

	# ALL DATA -
	if [ ""$SHOW_RAW"" -eq 1 ]
	then
		echo ${data} | awk '{ printf "%s %s\n", NODE, $0; }' NODE=${NODE} >> $tmp_file3
	fi

	# Precise fields -
	echo ${data} | awk '{ printf "%s %s\n", NODE, $0; }' NODE=${NODE} | awk '{ print $1,$6; }' >> $tmp_file2
    done

    #echo "DEBUG: Done gathering list"

    #count=`expr $count + 1`
    count=$(($count+1))

    if [ ""$count"" = 1 ]
    then
		##echo "DEBUG: Moving file 2 to file 1 (because 1st run)"
		mv $tmp_file2 $tmp_file1
    else
		##echo "DEBUG: comparing files..."
		rslt=`diff ${tmp_file1} ${tmp_file2} | wc -l`
		#echo "DEBUG: rslt = $rslt"

		###echo "DEBUG: Exiting for debugging..."
		###exit 2

		if [ ""$rslt"" -ne "0" ]
		then
			delta=`diff ${tmp_file1} ${tmp_file2} | awk '{
if (NF == 3) {
	node=$2;
	before=$3;
	getline;
	getline;
	after=$3;

	#printf "%d\t%s  %s\n", node, before, after;
	printf "%d\t%d\t\n", node, (after-before);
};
}'`
			##echo `date` " -    " $delta
			echo -n `date` " -"

			# Return all nodes in the "bubble diagram" to "nominal"
			bubble_diagram_nominal

			echo "$delta" | while IFS= read LINE
			do

				NODE=`echo $LINE | awk '{ print $1}'`
				TIME=`echo $LINE | awk '{ print $2}'`
				echo "  DEBUG: NODE: $NODE   TIME: $TIME"

				data=`grep "^${NODE} " $tmp_db_file | awk '{ $1=""; $2=""; print $0; }'`
				echo "  $NODE $TIME $data"

				# Colorize this nodes in the "bubble diagram"
				if [ ""$TIME"" -ge 7 -a ""$TIME"" -lt 240 ]
				then
					#echo "DEBUG: TIME green"
					bubble_diagram_active $NODE "green"
				else
					#echo "DEBUG: TIME lightyellow"
					bubble_diagram_active $NODE "lightyellow"
				fi

			done



			# Show "raw" data from all nodes just for grins...
			if [ ""$SHOW_RAW"" -eq 1 ]
			then
				cat $tmp_file3 | awk '{ printf "\t%s\n", $0; }'
			fi

			##echo "DEBUG: Moving file 2 to file 1 (after delta)"
			mv $tmp_file2 $tmp_file1
		fi
    fi


    # See if we have to update the list of connected nodes
    if [ ""$count"" -ge $GENERATE_NODE_LIST_MODULO ]
    then
	rm -f $tmp_file4 $tmp_file5
	# Save old list
	echo $NODE_LIST | awk '{ for (i=1;i<=NF;i++) print $i; }' > $tmp_file4
	##echo "DEBUG: OLD_NODE_LIST: [`cat $tmp_file4`]"

	# Get new node list
	get_node_list

	echo $NODE_LIST | awk '{ for (i=1;i<=NF;i++) print $i; }' > $tmp_file5
	##echo "DEBUG: NEW_NODE_LIST: [`cat $tmp_file5`]"

	##echo "DEBUG: Node-list diff: "
	disconnects=`diff $tmp_file4 $tmp_file5 | grep "<" | sed "s/<//g" | awk '{ print $1 }'`
	##echo "DEBUG: disconnects: [${disconnects}]"
	connects=`diff $tmp_file4 $tmp_file5 | grep ">" | sed "s/>//g" | awk '{ print $1 }'`
	##echo "DEBUG: connects: [${connects}]"

	redraw_bubbles=0
	if [ -n ""`echo ${disconnects} | sed 's/ //g'`"" ]
	then
		# DO need to redraw bubbles
		redraw_bubbles=1

		echo `date`"  - DISCONNECT:"
		for NODE2 in $disconnects
		do
			# If Allstar node database exists, and non-zero-length...
			if [ -s ""$ALLSTAR_NODE_DB"" ]
			then
				##echo "DEBUG: NODE2: [${NODE2}]"
				##grep "^$|{NODE2}|" $ALLSTAR_NODE_DB | awk '{ print "  - ",$0; }'
				grep "^|${NODE2}|" $ALLSTAR_NODE_DB | awk -F"|" '{
printf "  -  %-7d",$2;
for (i=3;i<=NF;i++) {
    printf "%s%s", FS, $i;
}
printf "\n";
}'
			else
				echo "  - ${NODE2} (NODES.DB NOT FOUND)"
			fi
		done
	fi

	if [ -n ""`echo ${connects} | sed 's/ //g'`"" ]
	then
		# DO need to redraw bubbles
		redraw_bubbles=1

		echo `date`"  - CONNECT:"
		for NODE2 in $connects
		do
			##grep "^${NODE2} " $tmp_db_file | awk '{ $2=""; print "  + ",$0; }'
			grep "^${NODE2} " $tmp_db_file | awk '{ $2=""; print "  + ",$0; }'
		done
	fi

	# If need to redraw bubble map, do so (in the background)
	if [ ""$redraw_bubbles"" -eq 1 ]
	then
		# Terminate any other attempt to draw bubble diagram
		killall bubbles
		sleep 2
		# Kick off redraw of bubble map in background
		(nohup bubbles $SEED_NODE_NUMBER >/dev/null 2>/dev/null)&
	fi

	# Let script know we've got a new list to work with
	count=0
    fi
done


exit 0



Tue Dec 11 23:23:17 PST 2018
2c2
< 49125 1544599354
---
> 49125 1544599393


 total time    28653
 keytime    1544576309
 total exec time    45
time stamp    1544580839


