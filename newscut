#!/bin/sh
#######################
# newscut - Tests having to do with cutting up a downloaded MP3 file using Python and FFTs.
#           This is a test for automatically processing the ARRL Audio News and/or AR Newsline weekly
#           audio feed at the "insert-your-repeater-callsign-here" point(s). Initially built for the
#           W0SRC repeater club.
#
# HISTORICAL INFORMATION -
#
#  2019-02-04  msipin  Created
#  2019-02-14  msipin  Accept command-line argument specifying news type (ARRL or ARN). Added "sanity
#                      check" to the output of the tone-detector. Added actual split-recording logic.
#  2019-02-22  msipin  Added new "--nolimit" command line argument that lets you override the 10-minute
#                      limit on partition length (per FCC rules - you have to ID your station at least
#                      every 10 minutes).
#  2019-02-27  msipin  Flipped max-partition-length logic on its head. Now this tool splits the input
#                      file wherever (if ever) the tone is found.  If that resulting split is too long
#                      for any purpose (including the 10-minute FCC ID requirement stated above), then
#                      it is up to the operator to re-run this tool with the new "--maxcut <nn>"
#                      command-line argument to specify where (max) to cut each partition.
#  2020-10-14  msipin  Converted output news.part.*.wav files to ulaw (news.part*.ul) and put them where
#                      playnews/playnewstest need them to be.
#######################

TMPDIR="/dev/shm" 
SRC="dunno.wav"
TYPE="DUNNO"
ULAW_DIR="/tmp"

# Prevent splits from occurring "too often" or "not often enough"
MIN_SPLIT_DURATION=100	# (minimum duration in seconds)
## OLD LOGIC -
##MAX_SPLIT_DURATION=600	# (in seconds) Per FCC, must ID every 10-minutes-or-less
## NEW LOGIC -
MAX_SPLIT_DURATION=999999	# Don't enforce a max partition limitation by default (let the
				# user override this behavior - if they want - using the "--maxcut <nn>"
				# command-line setting


DO_DOWNLOAD="1"		# Set to "1" to perform the download (aka "live") or "0" to skip it (aka when just testing)

usage()
{
	echo
	echo "usage: $0 [ --maxcut <nn> ] <file_type>"
	echo
	echo "where --maxcut <nn>   (optional) specifies the maximum duration (in seconds, where <nn> is number"
	echo "                      of seconds) for each portion of audio to be cut from the input"
	echo
	echo "and   <file_type> (mandatory) must be either ARN or ARRL, to indicate which audio news source"
	echo "                  to retrieve and process"
	echo
}



if [ $# -lt 1 ]
then
	usage
	exit 2
fi

if [ $1 == "--maxcut" ]
then
	MAX_SPLIT_DURATION=$2
	shift 2
fi

TYPE=$1

if [ ""$TYPE"" == "ARN" ]
then
	# Newsline (AR Newsline) -
	REMOVE=7.7	# Number of seconds of audio to remove, starting at the beginning of the tone, itself
	## ARN - Subtract (0.95 + 0.46) from tone-detection location
	## DETECT_LEADER=1.41 - Too much - occasionally cuts off tail of first part.
	DETECT_LEADER=0.96

	if [ ""$DO_DOWNLOAD"" = "1" ]
	then
		ARN_URL="https://www.arnewsline.org/s/news.mp3"
		rm -f news.mp3
		wget ${ARN_URL}
		lame -h --decode news.mp3 news.wav
	fi
	SRC="news.wav"

elif [ ""$TYPE"" == "ARRL" ]
then
	# ARRL Audio News -
	REMOVE=3.0	# Number of seconds of audio to remove, starting at the beginning of the tone, itself
	## ARRL - Subtract 0.34 from tone-detection location
	DETECT_LEADER=0.34

	if [ ""$DO_DOWNLOAD"" = "1" ]
	then
		## Hardcoded, for when didn't have a file around Christmas -
		##ARRL_URL="http://content.blubrry.com/arrlaudionews/AAN-2019-02-01.mp3"
		ARRL_URL="http://content.blubrry.com/arrlaudionews/AAN-$(date --date="last friday" +%Y-%m-%d).mp3"
		wget ${ARRL_URL}
		rm -f ARRL.mp3
		mv AAN-*.mp3 ARRL.mp3
		lame -h --decode ARRL.mp3 ARRL.wav
	fi
	SRC="ARRL.wav"

else
	echo
	echo "ERROR: Invalid <file_type>"
	usage
	exit 2
fi

echo


# Find the splits
splits=`findsplit ${TYPE} ${SRC} 2>/dev/null | awk 'BEGIN { errors=0; last=0; MIN_D='$MIN_SPLIT_DURATION'; MAX_D='$MAX_SPLIT_DURATION'; }{

##printf "MIN=%s  MAX=%s\n", MIN_D, MAX_D;

while ($2 != "TONE") readline;

if (($4 - last) < MIN_D)
{
	printf "\n\tERROR: Split at %d seconds occurs less than %d seconds after previous split at %d\n\n", $4, MIN_D, last > "/dev/stderr"
	errors++;
}
else if (($4 - last) > MAX_D)
{
	printf "\n\tERROR: Split at %d seconds occurs more than %d seconds after previous split at %d\n\n", $4, MAX_D, last > "/dev/stderr"
	last=last+MAX_D
	printf "Creating artificial split at %d\n", last > "/dev/stderr"
	print last
	errors++;
}
else
{
	print $4
	last=$4
}


} END {
printf "Errors encountered during processing: %d\n", errors > "/dev/stderr"
}'`


echo
echo "SECTIONS:"
echo -n "0"
for SPLIT in $splits
do
	echo " - "$SPLIT
	SPLIT=`echo $SPLIT + $REMOVE | bc`
	echo -n $SPLIT
done
echo " - EOF"

echo


# Divide into segments

START=0
PART=1

rm -f $TMPDIR/news.part*.wav
rm -f $ULAW_DIR/news.part*.wav
for SPLIT in $splits
do
	# Establish cut location (it's a little bit before the tone-detection location)
	CUTLOC=`echo $SPLIT - $DETECT_LEADER | bc`

	echo "Creating $TMPDIR/news.part$PART.wav as $START to $CUTLOC "
	sox --temp $TMPDIR $SRC $TMPDIR/news.part$PART.wav trim =$START =$CUTLOC &> /dev/null 2>&1
	echo "Converting $TMPDIR/news.part$PART.wav to u-law as $ULAW_DIR/news.part$PART.ul"
	sox --temp $TMPDIR -V $TMPDIR/news.part$PART.wav -r 8000 -c 1 -t ul $ULAW_DIR/news.part$PART.ul &> /dev/null 2>&1

	let "PART += 1"
	START=`echo $CUTLOC + $REMOVE | bc`
done
# Process final part -
echo "Creating $TMPDIR/news.part$PART.wav as $START to EOF "
sox --temp $TMPDIR $SRC $TMPDIR/news.part$PART.wav trim =$START =99999 &> /dev/null 2>&1
echo "Converting $TMPDIR/news.part$PART.wav to u-law as $ULAW_DIR/news.part$PART.ul"
sox --temp $TMPDIR -V $TMPDIR/news.part$PART.wav -r 8000 -c 1 -t ul $ULAW_DIR/news.part$PART.ul &> /dev/null 2>&1

# Remove temporary (.mp3 .wav) files
rm -f $TMPDIR/news.part*.wav
rm -f news.mp3 news.wav
rm -f ARRL.mp3 ARRL.wav


echo

exit 0


####################################
### FINDSPLIT OUTPUT -
####################################
	ARN -
                       $1     $2  $3   $4   $5       $6   $7   $8  $9     $10   $11    $12  $13 $14  $15  $16
                ****DETECTED TONE at  582 seconds: Chunk 4551 freq is 432.064478 Hz, Sample Rate is 16000 Hz

	ARRL -
                       $1     $2  $3   $4   $5       $6   $7   $8  $9     $10   $11    $12  $13 $14  $15  $16
                ****DETECTED TONE at   12 seconds: Chunk 289 freq is 375.097982 Hz, Sample Rate is 44100 Hz
                ****DETECTED TONE at  146 seconds: Chunk 3167 freq is 375.055615 Hz, Sample Rate is 44100 Hz
                ****DETECTED TONE at  276 seconds: Chunk 5955 freq is 375.085052 Hz, Sample Rate is 44100 Hz
                ****DETECTED TONE at  442 seconds: Chunk 9536 freq is 375.076782 Hz, Sample Rate is 44100 Hz

####################################

